using System.Data;
namespace Deleteme;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

public class TextLinesHandler : IEnumerable
{
    private List<string> rows = new();
    public int Count => rows.Count;
    public bool IsDirty { get; private set; } = false;

    public int Length => rows.Count;
    public string this[int index]
    {
        get => rows[index];
        set
        {
            if(index >= 0 && index < rows.Count && rows[index] != value)
            {
                rows[index] = value;
                IsDirty = true;
            }

        }
    }
    public string After(int index) => rows[index + 1];
    public string Before(int index) => rows[index - 1];
    public IEnumerator<string> GetEnumerator() => rows.GetEnumerator();
    IEnumerator IEnumerable.GetEnumerator() => rows.GetEnumerator();
    public int IndexOf(string text, bool trimFirst = false) => trimFirst ? rows.FindIndex(r => r.Trim() == text) : rows.IndexOf(text);
    public int IndexOfContaining(string text, bool trimFirst = false) => trimFirst ? rows.FindIndex(r => r.Trim().Contains(text)) : rows.FindIndex(r => r.Contains(text));
    public int IndexOfEndsWith(string text, bool trimFirst = false) => trimFirst ? rows.FindIndex(r => r.Trim().StartsWith(text)) : rows.FindIndex(r => r.StartsWith(text));
    public int IndexOfLast(string text, bool trimFirst = false) => trimFirst ? rows.FindLastIndex(r => r.Trim() == text) : rows.LastIndexOf(text);
    public void RemoveEmptyLines()
    {
        rows = rows.Where(r => r.Length > 0).ToList();
        IsDirty = true;
    }
    public int IndexOfLastContaining(string text, bool trimFirst = false) => trimFirst ? rows.FindLastIndex(r => r.Trim().Contains(text)) : rows.FindLastIndex(r => r.Contains(text));
    public  void AddNewlineBefore(string text)
    {
        var index = IndexOf(text);
        if(index > 0)
        {
            rows.Insert(index, "");
            IsDirty = true;
        }
    }

    public  void AddNewlineBeforeEvery(string text)
    {
        var index=0; 
        while (index< 1)
        {
            index = rows.IndexOf(text,index);
            if(index > 0)
            {
                rows.Insert(index, "");
                IsDirty = true;
            }
            index++;
        }	
    }

    
    public void AddNewlineAfter(int pos) => Insert(pos + 1, "");
    internal void RemoveEmptyLineBefore(string text)
    {
        var pos = 0;
        while(pos < rows.Count)
        {
            pos = rows.IndexOf(text, pos);
            if(pos < 0) break;
            if(pos >= rows.Count) break;
            if(Before(pos) == "")
                rows.RemoveAt(pos - 1);
            else
                pos++;
        }
    }
    public void AddNewlineBefore(int pos) => Insert(pos, "");
    internal void AddNewlineBeforeContains(string text)
    {
        var pos = IndexOfContaining(text, true);
        if(pos >= 0)
            Insert(pos, "");
        IsDirty = true;
    }
    internal void AddNewlineBeforeStartsWith(string text)
    {
        var pos = IndexOfStartsWith(text, true);
        if(pos >= 0)
            Insert(pos, "");
        IsDirty = true;
    }
    internal void AddNewlineBeforeEndsWith(string text)
    {
        var pos = IndexOfEndsWith(text, true);
        if(pos >= 0)
            Insert(pos, "");
        IsDirty = true;
    }
    internal void AddNewlineAfter(string text)
    {
        var pos = IndexOf(text, true);
        if(pos >= 0)
            Insert(pos + 1, "");
        IsDirty = true;
    }
    internal void AddNewlineAfterContains(string text)
    {
        var pos = IndexOfContaining(text, true);
        if(pos >= 0)
            Insert(pos + 1, "");
        IsDirty = true;
    }
    internal void AddNewlineAfterStartsWith(string text)
    {
        var pos = 0;
        pos = IndexOfStartsWith(text, true);
        if(pos >= 0)
            Insert(pos + 1, "");
        pos++;
        IsDirty = true;
    }
    internal void AddNewlineAfterEndsWith(string text)
    {
        var pos = IndexOfEndsWith(text, true);
        if(pos >= 0)
            Insert(pos + 1, "");
        IsDirty = true;
    }
    public int IndexOfLastEndsWith(string text, bool trimFirst = false) => trimFirst ? rows.FindLastIndex(r => r.Trim().StartsWith(text)) : rows.FindLastIndex(r => r.StartsWith(text));
    public int IndexOfLastStartsWith(string text, bool trimFirst = false) => trimFirst ? rows.FindLastIndex(r => r.Trim().StartsWith(text)) : rows.FindLastIndex(r => r.StartsWith(text));
    public int IndexOfStartsWith(string text, bool trimFirst = false) => trimFirst ? rows.FindIndex(r => r.Trim().StartsWith(text)) : rows.FindIndex(r => r.StartsWith(text));
    public void Insert(int index, string text)
    {
        if(text == null) text = "";
        rows.Insert(index, text);
    }
    public int LastIndexOf(string text, bool trimFirst = false) => trimFirst ? IndexOfLast(text, trimFirst) : IndexOfLast(text);
    public int LastIndexOfContaining(string text, bool trimFirst = false) => trimFirst ? IndexOfLastContaining(text, trimFirst) : IndexOfLastContaining(text);
    public int LastIndexOfEndsWith(string text, bool trimFirst = false) => trimFirst ? IndexOfLastEndsWith(text, trimFirst) : IndexOfLastEndsWith(text);
    public int LastIndexOfStartsWith(string text, bool trimFirst = false) => trimFirst ? IndexOfLastStartsWith(text, trimFirst) : IndexOfLastStartsWith(text);
    public TextLinesHandler Read(string filename)
    {
        rows = File.ReadAllLines(filename).ToList();
        IsDirty = false;
        return this;
    }
    public TextLinesHandler Save(string filename)
    {
        if(IsDirty) File.WriteAllLines(filename, rows);
        IsDirty = false;
        return this;
    }
    internal void Refresh()
    {
        var str = string.Join(Environment.NewLine, rows);
        rows = new List<string>(str.Split(Environment.NewLine));
    }
}
